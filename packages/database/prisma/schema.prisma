// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../generated/client"
}

model User {
    id                String            @id @default(uuid())
    name              String?
    email             String?           @unique
    emailVerified     DateTime?
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
    authentications   Authentication[]
    owned_assignments Assignment[]
    owned_submissions Submission[]
    owned_courses     Course[]
    owned_groups      AssignmentGroup[]
    roles             Role[]
}

model Authentication {
    id         String   @id @default(uuid())
    userId     String
    provider   String
    providerId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([provider, providerId])
}

model Course {
    id          String            @id @default(uuid())
    name        String
    description String?
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    assignments Assignment[]
    submissions Submission[]
    groups      AssignmentGroup[]
    roles       Role[]

    @@index([ownerId])
}

model Role {
    id        String   @id @default(uuid())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId  String
    role      RoleType
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId, courseId])
}

enum RoleType {
    STUDENT
    INSTRUCTOR
    TA
    ADMIN
}

model Assignment {
    id          String            @id @default(uuid())
    title       String
    description String?
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String
    submissions Submission[]
    groups      AssignmentGroup[]
}

model AssignmentGroup {
    id          String       @id @default(uuid())
    name        String
    description String?
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String
    course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String
    assignments Assignment[]
}

model Submission {
    id           String     @id @default(uuid())
    content      String
    grade        String
    assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
    assignmentId String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId     String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}
